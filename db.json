{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/GNAME","path":"GNAME","modified":1,"renderable":0},{"_id":"themes/ayer/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/ayer/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/ayer/source/css/404.styl","path":"css/404.styl","modified":1,"renderable":1},{"_id":"themes/ayer/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/ayer/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/ayer.png","path":"images/ayer.png","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/by-nc-sa.png","path":"images/by-nc-sa.png","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/forkme.png","path":"images/forkme.png","modified":1,"renderable":1},{"_id":"themes/ayer/source/js/ayer.js","path":"js/ayer.js","modified":1,"renderable":1},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":1,"renderable":1},{"_id":"themes/ayer/source/js/jquery.justifiedGallery.min.js","path":"js/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/ayer/source/js/pace.min.js","path":"js/pace.min.js","modified":1,"renderable":1},{"_id":"themes/ayer/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/ayer/source/js/share.js","path":"js/share.js","modified":1,"renderable":1},{"_id":"themes/ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/ayer/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/css/remixicon/remixicon.woff2","path":"css/remixicon/remixicon.woff2","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/css/remixicon/remixicon.woff","path":"css/remixicon/remixicon.woff","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/forrestgump.png","path":"images/forrestgump.png","modified":1,"renderable":1},{"_id":"themes/ayer/source/css/remixicon/remixicon.ttf","path":"css/remixicon/remixicon.ttf","modified":1,"renderable":1},{"_id":"themes/ayer/source/css/remixicon/remixicon.eot","path":"css/remixicon/remixicon.eot","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/css/remixicon/remixicon.symbol.svg","path":"css/remixicon/remixicon.symbol.svg","modified":1,"renderable":1},{"_id":"themes/ayer/source/css/remixicon/remixicon.svg","path":"css/remixicon/remixicon.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/GNAME","hash":"1a4a42945ac99e76ddbddd4e3b39dd2b0e361b21","modified":1581317879336},{"_id":"themes/ayer/.gitignore","hash":"5cdc0ed259a82d75c3cdce6bd63df7c31de3864b","modified":1581354537610},{"_id":"themes/ayer/.stylintrc","hash":"eec4e824067be1a223745ca426aa367c8d482673","modified":1581354537611},{"_id":"themes/ayer/LICENSE","hash":"115a72f86fc1c3f3211398517cd7593a40703334","modified":1581354537612},{"_id":"themes/ayer/README.md","hash":"19c73abc61718d423b29ee08ca02a434496c29b8","modified":1581354537612},{"_id":"themes/ayer/_config.yml","hash":"fa8be7337c2bcfcbe0631b40c2af2f3543d160e2","modified":1581429883430},{"_id":"themes/ayer/logo.png","hash":"94ede98236a9506e41b39493f72ef2f457858e41","modified":1581354537635},{"_id":"themes/ayer/package.json","hash":"ee2bb14ed91d3d64ed0e63a69f81cf5c1dac4004","modified":1581354537635},{"_id":"source/_posts/c-scope-0.md","hash":"f72cc399efa8898a709909b53360b7e83e026e23","modified":1581428220537},{"_id":"source/_posts/c-vector-internal.md","hash":"903f364460c1f95628a94757a660276f10a1b118","modified":1581426976879},{"_id":"source/_posts/first.md","hash":"9a33da0110781e03fad7ae0b7d8051a8a206c624","modified":1581355249141},{"_id":"source/_posts/numtest.md","hash":"c0ecfeebc45abd8e40abcdf26591e207fda661c7","modified":1581355260625},{"_id":"source/_posts/openssh-key.md","hash":"c7882e691a63e9b0ade793de4a27f035d4e58f70","modified":1581429136963},{"_id":"source/about/index.md","hash":"22928c90e75ddecfbdcfa35d9e705e38022a8dfb","modified":1581688503809},{"_id":"source/tags/index.md","hash":"522024bf32f56ea036e0ccc370b0a05313bca99f","modified":1581356414126},{"_id":"themes/ayer/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1581354537613},{"_id":"themes/ayer/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1581354537613},{"_id":"themes/ayer/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1581354537613},{"_id":"themes/ayer/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1581354537614},{"_id":"themes/ayer/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1581354537614},{"_id":"themes/ayer/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1581354537615},{"_id":"themes/ayer/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1581354537615},{"_id":"themes/ayer/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1581354537615},{"_id":"themes/ayer/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1581354537616},{"_id":"themes/ayer/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1581354537616},{"_id":"themes/ayer/languages/zh-CN.yml","hash":"138cf2645e053d69ed89ba36573214d4d58f7486","modified":1581354537616},{"_id":"themes/ayer/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1581354537616},{"_id":"themes/ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1581354537632},{"_id":"themes/ayer/layout/categories.ejs","hash":"4039d782c0b1c935ad4898a0bf29afc58c95fbde","modified":1581354537632},{"_id":"themes/ayer/layout/index.ejs","hash":"c40a98c0a6f55c27959e44c9e8e4f2619fc2ad3f","modified":1581354537632},{"_id":"themes/ayer/layout/layout.ejs","hash":"1ef5e84f9e8d15ee6b87361e88d0d7578bd44e80","modified":1581354537633},{"_id":"themes/ayer/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1581354537634},{"_id":"themes/ayer/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1581354537634},{"_id":"themes/ayer/layout/tags.ejs","hash":"e7c9f93c6f7041a7d2aa95e85cc131b22aa426b7","modified":1581354537634},{"_id":"themes/ayer/scripts/default_config.js","hash":"a5256fbd5d7af9d978ae99e2749a5ca48aa74133","modified":1581354537640},{"_id":"themes/ayer/source/404.html","hash":"5110b5b2505a01ef1e5d98c8d35071e11c13af9f","modified":1581354537643},{"_id":"themes/ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1581354537690},{"_id":"themes/ayer/layout/_partial/after-footer.ejs","hash":"9cbb4d9bb14694b9a9bdebc01fab39e9ad90f3a7","modified":1581354537618},{"_id":"themes/ayer/layout/_partial/archive-post.ejs","hash":"6b3e77cdbf8271c2a22b839608cccaa651f84e93","modified":1581354537619},{"_id":"themes/ayer/layout/_partial/archive.ejs","hash":"12e04e14a663fb4d30f4a22e92b0c3c2de36aaab","modified":1581354537619},{"_id":"themes/ayer/layout/_partial/article.ejs","hash":"5ce899f114f837c3c4ec7ab63356adedee1b0086","modified":1581421942838},{"_id":"themes/ayer/layout/_partial/ayer.ejs","hash":"b743debe5c9129fbf806f643c6eff14e25fe5098","modified":1581354537620},{"_id":"themes/ayer/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1581354537621},{"_id":"themes/ayer/layout/_partial/footer.ejs","hash":"f75279c3da2d3aa6d7068c0595f4235f7ef69b9d","modified":1581421691496},{"_id":"themes/ayer/layout/_partial/google-analytics.ejs","hash":"3a23d6ae48305c9f1b5c400da780288c2425254b","modified":1581354537622},{"_id":"themes/ayer/layout/_partial/head.ejs","hash":"4b9692ecdefeb34aa1a3aae28e18e15d48e21158","modified":1581354537622},{"_id":"themes/ayer/layout/_partial/mathjax.ejs","hash":"bcc264b6d6b58b3b692139c4d8b1381da4820da8","modified":1581354537622},{"_id":"themes/ayer/layout/_partial/modal.ejs","hash":"b9caece8b5fb47e250c67f6f80f101f08d04eba9","modified":1581354537623},{"_id":"themes/ayer/layout/_partial/sidebar.ejs","hash":"b7efb7f2b300de23d12ef310d710d809d979f4fd","modified":1581354537630},{"_id":"themes/ayer/layout/_partial/totop.ejs","hash":"1bb115b533565c55418072cfda2c7705f033cf34","modified":1581354537631},{"_id":"themes/ayer/layout/_partial/viewer.ejs","hash":"a732af24dca8120b679b674044b4ba4377c52358","modified":1581354537631},{"_id":"themes/ayer/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":1581354537640},{"_id":"themes/ayer/scripts/filters/meta_generator.js","hash":"86d0b5a475f59324b277824b2de15775505080c6","modified":1581354537641},{"_id":"themes/ayer/scripts/helpers/ayer-plus-vendors.js","hash":"611f3bcd8220312f92c11fa6a5dad02f011068d2","modified":1581354537641},{"_id":"themes/ayer/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":1581354537642},{"_id":"themes/ayer/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":1581354537643},{"_id":"themes/ayer/source/css/404.styl","hash":"31e772e911b83153513c80e4462926c77444b465","modified":1581354537644},{"_id":"themes/ayer/source/css/_extend.styl","hash":"07adace8753c1235d06e3058b9af8b6bb68e816f","modified":1581354537644},{"_id":"themes/ayer/source/css/_mixins.styl","hash":"e4804d78ded3714495f8ac9cebdbd2871ed97549","modified":1581354537645},{"_id":"themes/ayer/source/css/_normalize.styl","hash":"df9ca719f651c45a88ab4d6afa6d29edf51aeba9","modified":1581354537645},{"_id":"themes/ayer/source/css/_variables.styl","hash":"2fdb4425b6213fed28921f53179e825aee0500cf","modified":1581354537661},{"_id":"themes/ayer/source/css/style.styl","hash":"3a900552da1f8296520a046852c46b8240782d7d","modified":1581354537688},{"_id":"themes/ayer/source/fancybox/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1581354537689},{"_id":"themes/ayer/source/images/ayer-side.svg","hash":"bf0fc3e052e60c2a10d9dffa7b746358c4c33d6a","modified":1581354537692},{"_id":"themes/ayer/source/images/ayer.png","hash":"94ede98236a9506e41b39493f72ef2f457858e41","modified":1581354537692},{"_id":"themes/ayer/source/images/ayer.svg","hash":"1c87519aec678f95895c8480ddf44b371479f2f5","modified":1581354537693},{"_id":"themes/ayer/source/images/by-nc-sa.png","hash":"b2f456aa8d6fcc5b80f821ec321150329bf7dd8a","modified":1581406422776},{"_id":"themes/ayer/source/images/cover7.jpg","hash":"27e67d0ac848efa0f0195352a4b14a2f108565bf","modified":1581354537717},{"_id":"themes/ayer/source/images/forkme.png","hash":"b43e6e18b84edc40636204aa0eb9f266ef54a4e7","modified":1581354537718},{"_id":"themes/ayer/source/js/ayer.js","hash":"047f65fca0a1a26dfc93bac21fe0f731d1e93ece","modified":1581354537724},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1581354537724},{"_id":"themes/ayer/source/js/jquery.justifiedGallery.min.js","hash":"e628c5caefa53b09675efed2faa1c8ff04bb4d5f","modified":1581354537726},{"_id":"themes/ayer/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":1581354537726},{"_id":"themes/ayer/source/js/pace.min.js","hash":"64759f14e0f92d62df57eb752f1745a16aba93ce","modified":1581354537727},{"_id":"themes/ayer/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":1581354537727},{"_id":"themes/ayer/source/js/share.js","hash":"5e61ea53d316390d7fd650188041c35dcc8d9fa1","modified":1581354537728},{"_id":"themes/ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1581354537728},{"_id":"themes/ayer/screenshots/hexo-theme-ayer.png","hash":"265e0aaad0962caf7a7cae5ce98f1390c6716592","modified":1581354537639},{"_id":"themes/ayer/source/css/_remixicon.styl","hash":"629bc8205ad59b95be53b8054772dd9537fd4eed","modified":1581354537660},{"_id":"themes/ayer/source/fancybox/jquery.fancybox.min.js","hash":"3154fd527a002788848d9fec61d522048890e516","modified":1581354537690},{"_id":"themes/ayer/source/images/alipay.jpg","hash":"71792a1447bd42ca5be1f1f8d33cd40e9ff721c8","modified":1581354537692},{"_id":"themes/ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1581354537698},{"_id":"themes/ayer/source/images/sponsor.jpg","hash":"d19df6ddd7ca4ce5fe23db4ec2865265efa7ea54","modified":1581354537722},{"_id":"themes/ayer/source/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1581354537723},{"_id":"themes/ayer/source/js/jquery-2.0.3.min.js","hash":"e68550a39c95a6400287b3abd77f40c44f322e50","modified":1581354537725},{"_id":"themes/ayer/layout/_partial/post/albums.ejs","hash":"9af65ea540bc9af0ef5deed65c2dd24ffa96da41","modified":1581354537623},{"_id":"themes/ayer/layout/_partial/post/busuanzi.ejs","hash":"4e30e1b940eb06264a5ab5e39f5a9ae286ab6d93","modified":1581354537624},{"_id":"themes/ayer/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":1581354537624},{"_id":"themes/ayer/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1581354537625},{"_id":"themes/ayer/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":1581354537625},{"_id":"themes/ayer/layout/_partial/post/gitalk.ejs","hash":"6e38db4db098645ad8c2bfeb6a2445d306373bfe","modified":1581354537626},{"_id":"themes/ayer/layout/_partial/post/justifiedGallery.ejs","hash":"1891e345b43866c906bee529570147709bf193dc","modified":1581354537626},{"_id":"themes/ayer/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":1581354537627},{"_id":"themes/ayer/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":1581354537627},{"_id":"themes/ayer/layout/_partial/post/share.ejs","hash":"9a978d55358878c97186ed010e536e1b314adb35","modified":1581354537627},{"_id":"themes/ayer/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1581354537628},{"_id":"themes/ayer/layout/_partial/post/title.ejs","hash":"18f6b7c0de2ef128b0683aa6192ea72b6d0a2086","modified":1581354537628},{"_id":"themes/ayer/layout/_partial/post/tocbot.ejs","hash":"17ac504f2a6d561765046a0ba19dcce504104517","modified":1581354537629},{"_id":"themes/ayer/layout/_partial/post/topping.ejs","hash":"34a876fb0d83e8845c5b2eecf9769b45c1217962","modified":1581354537629},{"_id":"themes/ayer/layout/_partial/post/valine.ejs","hash":"070662f5e0ccfcdecbae3607c224b2ccf7cdefe9","modified":1581354537630},{"_id":"themes/ayer/layout/_partial/post/word.ejs","hash":"d7ac850312f2d953411f8574e751d6c0439447e1","modified":1581354537630},{"_id":"themes/ayer/source/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":1581354537646},{"_id":"themes/ayer/source/css/_partial/apple.styl","hash":"333f9e59dc6625c4dee126a1c1a9c25ce9292655","modified":1581354537647},{"_id":"themes/ayer/source/css/_partial/archive.styl","hash":"c20ad235d8aab4bc77a2372a053d86fe0069f7fe","modified":1581354537647},{"_id":"themes/ayer/source/css/_partial/article.styl","hash":"7625aba4dc684649e06e9878acce78496606537f","modified":1581354537648},{"_id":"themes/ayer/source/css/_partial/articles.styl","hash":"6877d0e032b9b044ba6d3029a7d626bca1f13c4e","modified":1581354537648},{"_id":"themes/ayer/source/css/_partial/ayer.styl","hash":"1e5002db0e6eaf0c915c3e964deadc53afeaeb3e","modified":1581354537649},{"_id":"themes/ayer/source/css/_partial/categories.styl","hash":"e2fc67c0bedfdc2c152cb32a429e999858026bb2","modified":1581354537649},{"_id":"themes/ayer/source/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":1581354537650},{"_id":"themes/ayer/source/css/_partial/footer.styl","hash":"a5d81197c6b69e4e31a3f13021deedf7fe72bc76","modified":1581354537650},{"_id":"themes/ayer/source/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":1581354537650},{"_id":"themes/ayer/source/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":1581354537651},{"_id":"themes/ayer/source/css/_partial/highlight.styl","hash":"2244e9f2feba479db8521500a35e9906e52ae8fd","modified":1581354537651},{"_id":"themes/ayer/source/css/_partial/justifiedGallery.styl","hash":"6d354099d27254bfe38cdc6b1baaae3b09a665f4","modified":1581354537652},{"_id":"themes/ayer/source/css/_partial/layout.styl","hash":"89ecffb134cff0d0c262e06b333cecce4476e453","modified":1581354537652},{"_id":"themes/ayer/source/css/_partial/lists.styl","hash":"dc45f8b1a5942d4d979fb0859bc47a86f73fe0a9","modified":1581354537653},{"_id":"themes/ayer/source/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1581354537653},{"_id":"themes/ayer/source/css/_partial/navbar.styl","hash":"30d7e1de22185c4b4da33eef66b5eb96f9e5ae98","modified":1581354537653},{"_id":"themes/ayer/source/css/_partial/pace.styl","hash":"bbda18c692fc66ae99e45347ff52c14e44a08e3b","modified":1581354537654},{"_id":"themes/ayer/source/css/_partial/reward.styl","hash":"90d8f14c5d7124ae9fcfd525da72fcc6a4508543","modified":1581354537655},{"_id":"themes/ayer/source/css/_partial/search.styl","hash":"3f2c7bd1371f6f25aec7c581dbae7b52f95ec4c6","modified":1581354537655},{"_id":"themes/ayer/source/css/_partial/share.styl","hash":"4a6e6ac9156553dd5cee1eeee8fdc6f1f8a5d117","modified":1581354537657},{"_id":"themes/ayer/source/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":1581354537657},{"_id":"themes/ayer/source/css/_partial/tag.styl","hash":"6072aa6bd16e0a1e75f0258d7b20587cab56fff8","modified":1581354537658},{"_id":"themes/ayer/source/css/_partial/tocbot.styl","hash":"85f3ea1ebee0dafa8df9a019270030577cbf80ee","modified":1581354537658},{"_id":"themes/ayer/source/css/_partial/totop.styl","hash":"1cffde8564f8801a571ff2253e63cfb5db6687f5","modified":1581354537658},{"_id":"themes/ayer/source/images/cover6.jpg","hash":"46942a4d90cac9ef8f33ae3e83ccf9aa7190bed6","modified":1581354537717},{"_id":"themes/ayer/source/css/remixicon/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1581354537688},{"_id":"themes/ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1581354537701},{"_id":"themes/ayer/source/css/remixicon/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1581354537686},{"_id":"themes/ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1581354537696},{"_id":"themes/ayer/source/images/forrestgump.png","hash":"18ad6a8ba815878e36a0d5562136dc4fb8920c12","modified":1581354537720},{"_id":"themes/ayer/source/css/remixicon/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1581354537685},{"_id":"themes/ayer/source/css/remixicon/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1581354537666},{"_id":"themes/ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1581354537707},{"_id":"themes/ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1581354537715},{"_id":"themes/ayer/source/css/remixicon/remixicon.symbol.svg","hash":"f1e044711e5e03dc13b1356b4ea4d4c40cd77416","modified":1581354537680},{"_id":"themes/ayer/source/css/remixicon/remixicon.svg","hash":"d5ab3ec2fd85b327b8c806228d2cd84b6d6b24c8","modified":1581354537674},{"_id":"public/atom.xml","hash":"2adbe6ec9adf59a91eac95795e2a539ad4f881c3","modified":1581697083901},{"_id":"public/search.xml","hash":"835680fb3e70fdb1b2b3bb0af50b1a9487ab9601","modified":1581697083901},{"_id":"public/about.html","hash":"004e8f423c61dcfc4d0f59f8232273c37b08856a","modified":1581697083901},{"_id":"public/tags/index.html","hash":"37e2c04b3b66c9d3c5da2b9637aa8273da36b337","modified":1581697083901},{"_id":"public/2020/02/11/1581427032718/index.html","hash":"7901ad1bfd465de4721f1c64f5ba1deb9c020907","modified":1581697083901},{"_id":"public/2020/02/10/1581350582023/index.html","hash":"af627e33b13f5965da661f1f6dab910e28996e3d","modified":1581697083901},{"_id":"public/2020/02/07/1581350582022/index.html","hash":"da3277bc841d7646ba538214d627955996886316","modified":1581697083901},{"_id":"public/archives/index.html","hash":"c94b2afa0245be627531bfa1dc6d96d9ef6152ae","modified":1581697083901},{"_id":"public/archives/2018/index.html","hash":"00d47c917a37e456274badb06ef29f268c40deca","modified":1581697083901},{"_id":"public/archives/2018/03/index.html","hash":"c6256498096b415b6e9f20f8af79d3ab6652443f","modified":1581697083901},{"_id":"public/archives/2018/04/index.html","hash":"a00379ccacd2353f054b6c54a7784d7320154493","modified":1581697083901},{"_id":"public/archives/2020/index.html","hash":"ce84f82dd4ceeb2d43b3ba0bcfe26ab11b75af0d","modified":1581697083901},{"_id":"public/archives/2020/02/index.html","hash":"515cfaba35fc6984370bd0700e864156c9294de8","modified":1581697083901},{"_id":"public/tags/c/index.html","hash":"21fda31329f868289416700fa943f3ae28c2a6df","modified":1581697083901},{"_id":"public/tags/test/index.html","hash":"49147e0d6327bd7a8b19b44aa9134dc1cee989f1","modified":1581697083901},{"_id":"public/2018/04/26/1581427933327/index.html","hash":"dc20c58ec43d7c7f1d621a97a0680e1ec252f70c","modified":1581697083901},{"_id":"public/2018/03/05/1581424604145/index.html","hash":"e4f30ff4b5e5a2db70dc7c0c076b1939077851bf","modified":1581697083901},{"_id":"public/index.html","hash":"85f895725d37ae18e87f691fc471793079ad1a52","modified":1581697083901},{"_id":"public/tags/backend/index.html","hash":"91f3b495c16625baa0177dcc9946a39a7a39c984","modified":1581697083901},{"_id":"public/GNAME","hash":"1a4a42945ac99e76ddbddd4e3b39dd2b0e361b21","modified":1581697083901},{"_id":"public/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1581697083901},{"_id":"public/images/ayer-side.svg","hash":"bf0fc3e052e60c2a10d9dffa7b746358c4c33d6a","modified":1581697083901},{"_id":"public/images/ayer.png","hash":"94ede98236a9506e41b39493f72ef2f457858e41","modified":1581697083901},{"_id":"public/images/ayer.svg","hash":"1c87519aec678f95895c8480ddf44b371479f2f5","modified":1581697083901},{"_id":"public/images/by-nc-sa.png","hash":"b2f456aa8d6fcc5b80f821ec321150329bf7dd8a","modified":1581697083901},{"_id":"public/images/cover7.jpg","hash":"27e67d0ac848efa0f0195352a4b14a2f108565bf","modified":1581697083901},{"_id":"public/images/forkme.png","hash":"b43e6e18b84edc40636204aa0eb9f266ef54a4e7","modified":1581697083901},{"_id":"public/images/alipay.jpg","hash":"71792a1447bd42ca5be1f1f8d33cd40e9ff721c8","modified":1581697083901},{"_id":"public/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1581697083901},{"_id":"public/images/sponsor.jpg","hash":"d19df6ddd7ca4ce5fe23db4ec2865265efa7ea54","modified":1581697083901},{"_id":"public/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1581697083901},{"_id":"public/css/remixicon/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1581697083901},{"_id":"public/css/remixicon/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1581697083901},{"_id":"public/css/404.css","hash":"952f9d1b869886a2940768fb7d1fd891ccea29fa","modified":1581697083901},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1581697083901},{"_id":"public/js/ayer.js","hash":"691b842cd3cae5fffa6aa56c64a6ba567ff2db96","modified":1581697083901},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1581697083901},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1581697083901},{"_id":"public/js/pace.min.js","hash":"d32ab818e0f97d3b0c80f5631fc23d8a0cb52795","modified":1581697083901},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1581697083901},{"_id":"public/js/share.js","hash":"4e7b425356244bd9c5650ff25c2d4473e448d4c7","modified":1581697083901},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1581697083901},{"_id":"public/404.html","hash":"6889e8a652a6cc28c9b8f933b2bfcbefb2de3f00","modified":1581697083901},{"_id":"public/css/style.css","hash":"87a48c9c8d2ded31d88a95d3d3e7d8b5c02d6a01","modified":1581697083901},{"_id":"public/js/jquery.justifiedGallery.min.js","hash":"73b9373cd80bdbf77e711818095f3f120a019547","modified":1581697083901},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"b2b093d8f5ffeee250c8d0d3a2285a213318e4ea","modified":1581697083901},{"_id":"public/js/jquery-2.0.3.min.js","hash":"800edb7787c30f4982bf38f2cb8f4f6fb61340e9","modified":1581697083901},{"_id":"public/images/cover6.jpg","hash":"46942a4d90cac9ef8f33ae3e83ccf9aa7190bed6","modified":1581697083901},{"_id":"public/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1581697083901},{"_id":"public/images/forrestgump.png","hash":"18ad6a8ba815878e36a0d5562136dc4fb8920c12","modified":1581697083901},{"_id":"public/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1581697083901},{"_id":"public/css/remixicon/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1581697083901},{"_id":"public/css/remixicon/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1581697083901},{"_id":"public/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1581697083901},{"_id":"public/css/remixicon/remixicon.symbol.svg","hash":"f1e044711e5e03dc13b1356b4ea4d4c40cd77416","modified":1581697083901},{"_id":"public/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1581697083901},{"_id":"public/css/remixicon/remixicon.svg","hash":"d5ab3ec2fd85b327b8c806228d2cd84b6d6b24c8","modified":1581697083901}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2020-02-10T17:24:20.000Z","_content":"陳哲佑 台灣台南人 邊疆大學資工系廢材乙個\n這邊應該全是工作筆記、土炮紀錄、耍腦發廚\n愼入\n\ngitlab : https://gitlab.com/joe1231231218\nemail : connection@ericchen.name\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-02-11 01:24:20\npermalink: about\n---\n陳哲佑 台灣台南人 邊疆大學資工系廢材乙個\n這邊應該全是工作筆記、土炮紀錄、耍腦發廚\n愼入\n\ngitlab : https://gitlab.com/joe1231231218\nemail : connection@ericchen.name\n","updated":"2020-02-14T13:55:03.809Z","path":"about.html","comments":1,"layout":"page","_id":"ck6mdltb6000d24v78gl364cd","content":"<p>陳哲佑 台灣台南人 邊疆大學資工系廢材乙個<br>這邊應該全是工作筆記、土炮紀錄、耍腦發廚<br>愼入</p>\n<p>gitlab : <a href=\"https://gitlab.com/joe1231231218\" target=\"_blank\" rel=\"noopener\">https://gitlab.com/joe1231231218</a><br>email : <a href=\"mailto:connection@ericchen.name\">connection@ericchen.name</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>陳哲佑 台灣台南人 邊疆大學資工系廢材乙個<br>這邊應該全是工作筆記、土炮紀錄、耍腦發廚<br>愼入</p>\n<p>gitlab : <a href=\"https://gitlab.com/joe1231231218\" target=\"_blank\" rel=\"noopener\">https://gitlab.com/joe1231231218</a><br>email : <a href=\"mailto:connection@ericchen.name\">connection@ericchen.name</a></p>\n"},{"title":"tags","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: tags\nlayout: tags\n---\n","date":"2020-02-10T17:40:14.126Z","updated":"2020-02-10T17:40:14.126Z","path":"tags/index.html","comments":1,"_id":"ck6mdltb9000e24v72v64hr1y","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"c scope 0","date":"2018-04-26T13:32:13.000Z","_content":"# c的變數可見域\n半夜隔壁房再吵，睡不著寫第一篇教學幹話。其實是自己金魚腦，要筆記。\n### 區域變數\n區域變數(幹在函數第一層)，你寫在函數裡的那一種(main也算)，只有宣告下面的看的見，如果再\"{}\"裡，就裡面看的到。\n```c\nint main(){\nint x;\nfor(int i;;){\nint y;\n}\n}\n```\nx main內全可見，i,y for內可見。\n### 全域變數\n全域變數，沒extern(就那個讓你在c裡寫其他語言的關鍵字)就你該張檔看的到，有的話include會汙染，\n通常拿來讓函式回傳不只一個質。\n```c\nint g;\nint func(){\n++g;\nreturn 0;\n}\nint main(){\nreturn g?func():2;\n}\n```\ng全域可見\nstatic，修飾字，加給全域變數時是幹話，加給函式時會在編譯時分配通常在data區，離開函式時值不話消失，\n故不能遞迴，初始質只會處裡一次，可以直接給在函式裡。\n```c\nint func(){\nstatic int g=0;\nreturn ++g;\n}\nint main(){\nint x=func();\nx=func();\nx=func();\n}\n```\nx為1，2，3\n\n全域，static不給初始質是0，區域看你電腦心情。\n同名變數部分，會先遮蔽全域，至於涵式內同名，你去死。\n\n先暫時打在fb，等到天荒地老我把我網站做好再搬過去，程式多沒測，通常也沒什麼意義。\n> 現在這文應該已經在我部落格了應該拉","source":"_posts/c-scope-0.md","raw":"---\ntitle: c scope 0\ndate: 2018-04-26 21:32:13\ntags: c\npermalink: 1581427933327\n---\n# c的變數可見域\n半夜隔壁房再吵，睡不著寫第一篇教學幹話。其實是自己金魚腦，要筆記。\n### 區域變數\n區域變數(幹在函數第一層)，你寫在函數裡的那一種(main也算)，只有宣告下面的看的見，如果再\"{}\"裡，就裡面看的到。\n```c\nint main(){\nint x;\nfor(int i;;){\nint y;\n}\n}\n```\nx main內全可見，i,y for內可見。\n### 全域變數\n全域變數，沒extern(就那個讓你在c裡寫其他語言的關鍵字)就你該張檔看的到，有的話include會汙染，\n通常拿來讓函式回傳不只一個質。\n```c\nint g;\nint func(){\n++g;\nreturn 0;\n}\nint main(){\nreturn g?func():2;\n}\n```\ng全域可見\nstatic，修飾字，加給全域變數時是幹話，加給函式時會在編譯時分配通常在data區，離開函式時值不話消失，\n故不能遞迴，初始質只會處裡一次，可以直接給在函式裡。\n```c\nint func(){\nstatic int g=0;\nreturn ++g;\n}\nint main(){\nint x=func();\nx=func();\nx=func();\n}\n```\nx為1，2，3\n\n全域，static不給初始質是0，區域看你電腦心情。\n同名變數部分，會先遮蔽全域，至於涵式內同名，你去死。\n\n先暫時打在fb，等到天荒地老我把我網站做好再搬過去，程式多沒測，通常也沒什麼意義。\n> 現在這文應該已經在我部落格了應該拉","slug":"1581427933327","published":1,"updated":"2020-02-11T13:37:00.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6mdlt9w000024v7d7t4cguu","content":"<h1 id=\"c的變數可見域\"><a href=\"#c的變數可見域\" class=\"headerlink\" title=\"c的變數可見域\"></a>c的變數可見域</h1><p>半夜隔壁房再吵，睡不著寫第一篇教學幹話。其實是自己金魚腦，要筆記。</p>\n<h3 id=\"區域變數\"><a href=\"#區域變數\" class=\"headerlink\" title=\"區域變數\"></a>區域變數</h3><p>區域變數(幹在函數第一層)，你寫在函數裡的那一種(main也算)，只有宣告下面的看的見，如果再”{}”裡，就裡面看的到。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i;;)&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>x main內全可見，i,y for內可見。</p>\n<h3 id=\"全域變數\"><a href=\"#全域變數\" class=\"headerlink\" title=\"全域變數\"></a>全域變數</h3><p>全域變數，沒extern(就那個讓你在c裡寫其他語言的關鍵字)就你該張檔看的到，有的話include會汙染，<br>通常拿來讓函式回傳不只一個質。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> g;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">++g;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> g?func():<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>g全域可見<br>static，修飾字，加給全域變數時是幹話，加給函式時會在編譯時分配通常在data區，離開函式時值不話消失，<br>故不能遞迴，初始質只會處裡一次，可以直接給在函式裡。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> g=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> ++g;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x=func();</span><br><span class=\"line\">x=func();</span><br><span class=\"line\">x=func();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>x為1，2，3</p>\n<p>全域，static不給初始質是0，區域看你電腦心情。<br>同名變數部分，會先遮蔽全域，至於涵式內同名，你去死。</p>\n<p>先暫時打在fb，等到天荒地老我把我網站做好再搬過去，程式多沒測，通常也沒什麼意義。</p>\n<blockquote>\n<p>現在這文應該已經在我部落格了應該拉</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"c的變數可見域\"><a href=\"#c的變數可見域\" class=\"headerlink\" title=\"c的變數可見域\"></a>c的變數可見域</h1><p>半夜隔壁房再吵，睡不著寫第一篇教學幹話。其實是自己金魚腦，要筆記。</p>\n<h3 id=\"區域變數\"><a href=\"#區域變數\" class=\"headerlink\" title=\"區域變數\"></a>區域變數</h3><p>區域變數(幹在函數第一層)，你寫在函數裡的那一種(main也算)，只有宣告下面的看的見，如果再”{}”裡，就裡面看的到。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i;;)&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>x main內全可見，i,y for內可見。</p>\n<h3 id=\"全域變數\"><a href=\"#全域變數\" class=\"headerlink\" title=\"全域變數\"></a>全域變數</h3><p>全域變數，沒extern(就那個讓你在c裡寫其他語言的關鍵字)就你該張檔看的到，有的話include會汙染，<br>通常拿來讓函式回傳不只一個質。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> g;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">++g;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> g?func():<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>g全域可見<br>static，修飾字，加給全域變數時是幹話，加給函式時會在編譯時分配通常在data區，離開函式時值不話消失，<br>故不能遞迴，初始質只會處裡一次，可以直接給在函式裡。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> g=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> ++g;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x=func();</span><br><span class=\"line\">x=func();</span><br><span class=\"line\">x=func();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>x為1，2，3</p>\n<p>全域，static不給初始質是0，區域看你電腦心情。<br>同名變數部分，會先遮蔽全域，至於涵式內同名，你去死。</p>\n<p>先暫時打在fb，等到天荒地老我把我網站做好再搬過去，程式多沒測，通常也沒什麼意義。</p>\n<blockquote>\n<p>現在這文應該已經在我部落格了應該拉</p>\n</blockquote>\n"},{"title":"c++ vector internal","date":"2018-03-05T12:36:44.000Z","_content":"# c++ vector internal\n### 基本概念\n動態請求的array\n就是太小重要更大的，然後搬過去\n看code\n```c++=\ntem* resize(unsigned long vsize){\n        tem *pay=new tem[vsize],*ppa,*endp=pay+vsize,*par;\n        for(par=arr,ppa=pay;ppa<=endp&&par<=endc;++ppa,++par){\n            *ppa=*par;\n        }\n        delete [] arr;\n        arr=pay;crr=par;endc=endp;\n        return arr;\n    }\n```\n\n他有規範要寫的函式\n\n有[標準](https://www.iso.org/standard/38110.html)IEEE死要錢:shit:\n\n去看cpp reference\n![](https://i.imgur.com/EqWd9uN.jpg)\n![](https://i.imgur.com/7yqYmQP.jpg)\n\n我有寫，示範:\n```c++\n#define addlen 5\n \ntemplate<class tem>\nclass svector{\n    tem* arr,*endc,*crr;\n    public:\n    tem* push_back(tem in){\n        (crr==endc)?resize(sizeof(arr)+addlen),*crr=in:*crr=in;\n        return ++crr;\n    }\n    tem* resize(unsigned long vsize){\n        tem *pay=new tem[vsize],*ppa,*endp=pay+vsize,*par;\n        for(par=arr,ppa=pay;ppa<=endp&&par<=endc;++ppa,++par){\n            *ppa=*par;\n        }\n        delete [] arr;\n        arr=pay;crr=par;endc=endp;\n        return arr;\n    }\n    tem* pop_back(void){\n       return --crr;\n    }\n    inline tem operator [](unsigned int po){\n        return arr[po];\n    }\n    inline tem at(unsigned int po){\n        return (po<crr&&po>=arr)?arr[po]:arr[0];\n    }\n    void clear(void){\n        delete [] arr;\n        arr=new tem[addlen];\n        endc=arr+addlen+1;\n        crr=arr;\n    }\n    inline tem back(void){\n        return *(crr-1);\n    }\n    inline tem front(void){\n        return *arr;\n    }\n    inline unsigned long  comprise(void){\n        return sizeof(arr);\n    }\n    inline unsigned long  size(void){\n        return arr==crr?0:(arr-crr)?for(unsigned long i=0;)\n    }\n    svector(){arr=new tem[addlen];crr=arr;endc=arr+addlen+1;}\n    ~svector(){delete [] arr;}\n};\n```\n\n>帶大家去幹[apache](http://svn.apache.org/repos/asf/stdcxx/branches/4.2.x/include/vector)的(gun看不懂)\n\n先換名子\n```c++=\n    typedef _TypeT                                     value_type;\n    typedef _Allocator                                 allocator_type;\n    typedef _TYPENAME allocator_type::size_type        size_type;\n    typedef _TYPENAME allocator_type::difference_type  difference_type;\n    typedef _TYPENAME allocator_type::reference        reference;\n    typedef _TYPENAME allocator_type::const_reference  const_reference;\n    typedef _TYPENAME allocator_type::pointer          pointer;\n    typedef _TYPENAME allocator_type::const_pointer    const_pointer;\n```\n\n還有一些很噁爛的沒過來\n\n看結構\n\n```c++=\n    iterator       _C_begin;\n    iterator       _C_end;\n    unsigned int * _C_bufend;\n    \n    struct _C_VectorAlloc: allocator_type {\n\n        _C_VectorAlloc (const allocator_type &__alloc)\n            : allocator_type (__alloc), _C_begin (), _C_end (), _C_bufend ()\n            { /* empty */}\n\n        pointer _C_begin;\n        pointer _C_end;\n        pointer _C_bufend;\n    } _C_alloc;\n\n```\n直接指過去\n\n建構子\n```c++=\ntemplate<class _InputIter>\n    vector  (_InputIter __first, _InputIter __last)\n        : allocator_type (), _C_bufend ()\n    {\n      size_type __n = _DISTANCE (__first, __last, size_type);\n      _C_init(__n); \n      _C_copy(__first, __last, _C_begin);\n    }\n\n```\n假裝分配器已知，直接初始化\n用前後家長度幹__n(vec.size())，應為那還是沒做除法XDDD\n\ninsert()\n```c++=\ntemplate <class _InputIter>\n    void _C_insert (const iterator &__it,\n                   _InputIter __first, _InputIter __last, void*) {\n        _RWSTD_ASSERT_RANGE (begin (), __it);\n        _RWSTD_ASSERT_RANGE (__first, __last);\n\n        // dispatch to an insert suitable for the category of InputIter\n        _RWSTD_INSERT_RANGE (__it, __first, __last,\n                             _RWSTD_ITERATOR_CATEGORY (_InputIter, __first));\n    }\n```\npush_back()\n```c++=\n void _C_push_back (const_reference __x) {\n        _RWSTD_ASSERT (_C_alloc._C_end != _C_alloc._C_bufend);\n        _C_alloc.construct (_C_alloc._C_end, __x);\n        ++_C_alloc._C_end;\n    }\n```\npop_back()\n```c++=\n void pop_back () {\n        _RWSTD_ASSERT (!empty ());\n        _C_alloc.destroy (_C_alloc._C_end - 1);\n        --_C_alloc._C_end;\n    }\n```\n```c++=\n bool empty () const {\n        return _C_alloc._C_begin == _C_alloc._C_end;\n    }\n```\nswap()\n```c++=\nswap (vector &__other)\n{\n    if (get_allocator () == __other.get_allocator ()) {\n        pointer __tmp             = _C_alloc._C_begin;\n        _C_alloc._C_begin         = __other._C_alloc._C_begin;\n        __other._C_alloc._C_begin = __tmp;\n        __tmp                     = _C_alloc._C_end;\n        _C_alloc._C_end           = __other._C_alloc._C_end;\n        __other._C_alloc._C_end   = __tmp;\n        __tmp                     = _C_alloc._C_bufend;\n        _C_alloc._C_bufend        = __other._C_alloc._C_bufend;\n        __other._C_alloc._C_bufend = __tmp;\n    }\n    else {\n        // not exception-safe\n        _C_unsafe_swap (__other);\n    }\n}\n```\n會寫出來就是他直接copy，一個一個\n\nasign()\n```c++=\n void _C_assign (_InputIter __first, _InputIter __last, void*) {\n        _RWSTD_ASSERT_RANGE (__first, __last);\n\n        // dispatch to an assign suitable for the category of InputIter\n        _RWSTD_ASSIGN_RANGE (__first, __last,\n                             _RWSTD_ITERATOR_CATEGORY (_InputIter, __first));\n    }\n```\nresize()\n```c++=\n void _C_fill (iterator __first, iterator __last, bool __val) {\n        while (__first != __last) *__first++ = __val;\n    }\n\n    void _C_fill_n (iterator __first, size_type __n, bool __val) {\n        while (__n-- > 0) *__first++ = __val;\n    }\n\n    template <class _Iterator>\n    iterator _C_copy (_Iterator __first, _Iterator __last, iterator __res) {\n        while (__first != __last)\n            *__res++ = *__first++;\n        return __res;\n    }\n```\n\n\n其實已經有[大大](https://hadibrais.wordpress.com/2013/11/10/dissecting-the-c-stl-vector-part-1-introduction/)幹過，寫得比我好太多了，不過他是做m$的","source":"_posts/c-vector-internal.md","raw":"---\ntitle: c++ vector internal\ndate: 2018-03-5 20:36:44\ntags: c++\npermalink: 1581424604145\n---\n# c++ vector internal\n### 基本概念\n動態請求的array\n就是太小重要更大的，然後搬過去\n看code\n```c++=\ntem* resize(unsigned long vsize){\n        tem *pay=new tem[vsize],*ppa,*endp=pay+vsize,*par;\n        for(par=arr,ppa=pay;ppa<=endp&&par<=endc;++ppa,++par){\n            *ppa=*par;\n        }\n        delete [] arr;\n        arr=pay;crr=par;endc=endp;\n        return arr;\n    }\n```\n\n他有規範要寫的函式\n\n有[標準](https://www.iso.org/standard/38110.html)IEEE死要錢:shit:\n\n去看cpp reference\n![](https://i.imgur.com/EqWd9uN.jpg)\n![](https://i.imgur.com/7yqYmQP.jpg)\n\n我有寫，示範:\n```c++\n#define addlen 5\n \ntemplate<class tem>\nclass svector{\n    tem* arr,*endc,*crr;\n    public:\n    tem* push_back(tem in){\n        (crr==endc)?resize(sizeof(arr)+addlen),*crr=in:*crr=in;\n        return ++crr;\n    }\n    tem* resize(unsigned long vsize){\n        tem *pay=new tem[vsize],*ppa,*endp=pay+vsize,*par;\n        for(par=arr,ppa=pay;ppa<=endp&&par<=endc;++ppa,++par){\n            *ppa=*par;\n        }\n        delete [] arr;\n        arr=pay;crr=par;endc=endp;\n        return arr;\n    }\n    tem* pop_back(void){\n       return --crr;\n    }\n    inline tem operator [](unsigned int po){\n        return arr[po];\n    }\n    inline tem at(unsigned int po){\n        return (po<crr&&po>=arr)?arr[po]:arr[0];\n    }\n    void clear(void){\n        delete [] arr;\n        arr=new tem[addlen];\n        endc=arr+addlen+1;\n        crr=arr;\n    }\n    inline tem back(void){\n        return *(crr-1);\n    }\n    inline tem front(void){\n        return *arr;\n    }\n    inline unsigned long  comprise(void){\n        return sizeof(arr);\n    }\n    inline unsigned long  size(void){\n        return arr==crr?0:(arr-crr)?for(unsigned long i=0;)\n    }\n    svector(){arr=new tem[addlen];crr=arr;endc=arr+addlen+1;}\n    ~svector(){delete [] arr;}\n};\n```\n\n>帶大家去幹[apache](http://svn.apache.org/repos/asf/stdcxx/branches/4.2.x/include/vector)的(gun看不懂)\n\n先換名子\n```c++=\n    typedef _TypeT                                     value_type;\n    typedef _Allocator                                 allocator_type;\n    typedef _TYPENAME allocator_type::size_type        size_type;\n    typedef _TYPENAME allocator_type::difference_type  difference_type;\n    typedef _TYPENAME allocator_type::reference        reference;\n    typedef _TYPENAME allocator_type::const_reference  const_reference;\n    typedef _TYPENAME allocator_type::pointer          pointer;\n    typedef _TYPENAME allocator_type::const_pointer    const_pointer;\n```\n\n還有一些很噁爛的沒過來\n\n看結構\n\n```c++=\n    iterator       _C_begin;\n    iterator       _C_end;\n    unsigned int * _C_bufend;\n    \n    struct _C_VectorAlloc: allocator_type {\n\n        _C_VectorAlloc (const allocator_type &__alloc)\n            : allocator_type (__alloc), _C_begin (), _C_end (), _C_bufend ()\n            { /* empty */}\n\n        pointer _C_begin;\n        pointer _C_end;\n        pointer _C_bufend;\n    } _C_alloc;\n\n```\n直接指過去\n\n建構子\n```c++=\ntemplate<class _InputIter>\n    vector  (_InputIter __first, _InputIter __last)\n        : allocator_type (), _C_bufend ()\n    {\n      size_type __n = _DISTANCE (__first, __last, size_type);\n      _C_init(__n); \n      _C_copy(__first, __last, _C_begin);\n    }\n\n```\n假裝分配器已知，直接初始化\n用前後家長度幹__n(vec.size())，應為那還是沒做除法XDDD\n\ninsert()\n```c++=\ntemplate <class _InputIter>\n    void _C_insert (const iterator &__it,\n                   _InputIter __first, _InputIter __last, void*) {\n        _RWSTD_ASSERT_RANGE (begin (), __it);\n        _RWSTD_ASSERT_RANGE (__first, __last);\n\n        // dispatch to an insert suitable for the category of InputIter\n        _RWSTD_INSERT_RANGE (__it, __first, __last,\n                             _RWSTD_ITERATOR_CATEGORY (_InputIter, __first));\n    }\n```\npush_back()\n```c++=\n void _C_push_back (const_reference __x) {\n        _RWSTD_ASSERT (_C_alloc._C_end != _C_alloc._C_bufend);\n        _C_alloc.construct (_C_alloc._C_end, __x);\n        ++_C_alloc._C_end;\n    }\n```\npop_back()\n```c++=\n void pop_back () {\n        _RWSTD_ASSERT (!empty ());\n        _C_alloc.destroy (_C_alloc._C_end - 1);\n        --_C_alloc._C_end;\n    }\n```\n```c++=\n bool empty () const {\n        return _C_alloc._C_begin == _C_alloc._C_end;\n    }\n```\nswap()\n```c++=\nswap (vector &__other)\n{\n    if (get_allocator () == __other.get_allocator ()) {\n        pointer __tmp             = _C_alloc._C_begin;\n        _C_alloc._C_begin         = __other._C_alloc._C_begin;\n        __other._C_alloc._C_begin = __tmp;\n        __tmp                     = _C_alloc._C_end;\n        _C_alloc._C_end           = __other._C_alloc._C_end;\n        __other._C_alloc._C_end   = __tmp;\n        __tmp                     = _C_alloc._C_bufend;\n        _C_alloc._C_bufend        = __other._C_alloc._C_bufend;\n        __other._C_alloc._C_bufend = __tmp;\n    }\n    else {\n        // not exception-safe\n        _C_unsafe_swap (__other);\n    }\n}\n```\n會寫出來就是他直接copy，一個一個\n\nasign()\n```c++=\n void _C_assign (_InputIter __first, _InputIter __last, void*) {\n        _RWSTD_ASSERT_RANGE (__first, __last);\n\n        // dispatch to an assign suitable for the category of InputIter\n        _RWSTD_ASSIGN_RANGE (__first, __last,\n                             _RWSTD_ITERATOR_CATEGORY (_InputIter, __first));\n    }\n```\nresize()\n```c++=\n void _C_fill (iterator __first, iterator __last, bool __val) {\n        while (__first != __last) *__first++ = __val;\n    }\n\n    void _C_fill_n (iterator __first, size_type __n, bool __val) {\n        while (__n-- > 0) *__first++ = __val;\n    }\n\n    template <class _Iterator>\n    iterator _C_copy (_Iterator __first, _Iterator __last, iterator __res) {\n        while (__first != __last)\n            *__res++ = *__first++;\n        return __res;\n    }\n```\n\n\n其實已經有[大大](https://hadibrais.wordpress.com/2013/11/10/dissecting-the-c-stl-vector-part-1-introduction/)幹過，寫得比我好太多了，不過他是做m$的","slug":"1581424604145","published":1,"updated":"2020-02-11T13:16:16.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6mdlta3000124v7cx86bm0e","content":"<h1 id=\"c-vector-internal\"><a href=\"#c-vector-internal\" class=\"headerlink\" title=\"c++ vector internal\"></a>c++ vector internal</h1><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>動態請求的array<br>就是太小重要更大的，然後搬過去<br>看code</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">tem* <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> vsize)</span></span>&#123;</span><br><span class=\"line\">        tem *pay=<span class=\"keyword\">new</span> tem[vsize],*ppa,*endp=pay+vsize,*par;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(par=arr,ppa=pay;ppa&lt;=endp&amp;&amp;par&lt;=endc;++ppa,++par)&#123;</span><br><span class=\"line\">            *ppa=*par;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] arr;</span><br><span class=\"line\">        arr=pay;crr=par;endc=endp;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>他有規範要寫的函式</p>\n<p>有<a href=\"https://www.iso.org/standard/38110.html\" target=\"_blank\" rel=\"noopener\">標準</a>IEEE死要錢:shit:</p>\n<p>去看cpp reference<br><img src=\"https://i.imgur.com/EqWd9uN.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/7yqYmQP.jpg\" alt=\"\"></p>\n<p>我有寫，示範:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> addlen 5</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">tem</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">svector</span>&#123;</span></span><br><span class=\"line\">    tem* arr,*endc,*crr;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">tem* <span class=\"title\">push_back</span><span class=\"params\">(tem in)</span></span>&#123;</span><br><span class=\"line\">        (crr==endc)?resize(<span class=\"keyword\">sizeof</span>(arr)+addlen),*crr=in:*crr=in;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ++crr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">tem* <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> vsize)</span></span>&#123;</span><br><span class=\"line\">        tem *pay=<span class=\"keyword\">new</span> tem[vsize],*ppa,*endp=pay+vsize,*par;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(par=arr,ppa=pay;ppa&lt;=endp&amp;&amp;par&lt;=endc;++ppa,++par)&#123;</span><br><span class=\"line\">            *ppa=*par;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] arr;</span><br><span class=\"line\">        arr=pay;crr=par;endc=endp;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">tem* <span class=\"title\">pop_back</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> --crr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> tem <span class=\"keyword\">operator</span> [](<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> po)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[po];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> tem <span class=\"title\">at</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> po)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (po&lt;crr&amp;&amp;po&gt;=arr)?arr[po]:arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] arr;</span><br><span class=\"line\">        arr=<span class=\"keyword\">new</span> tem[addlen];</span><br><span class=\"line\">        endc=arr+addlen+<span class=\"number\">1</span>;</span><br><span class=\"line\">        crr=arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> tem <span class=\"title\">back</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *(crr<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> tem <span class=\"title\">front</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>  <span class=\"title\">comprise</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">sizeof</span>(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>  <span class=\"title\">size</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr==crr?<span class=\"number\">0</span>:(arr-crr)?<span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> i=<span class=\"number\">0</span>;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    svector()&#123;arr=<span class=\"keyword\">new</span> tem[addlen];crr=arr;endc=arr+addlen+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    ~svector()&#123;<span class=\"keyword\">delete</span> [] arr;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>帶大家去幹<a href=\"http://svn.apache.org/repos/asf/stdcxx/branches/4.2.x/include/vector\" target=\"_blank\" rel=\"noopener\">apache</a>的(gun看不懂)</p>\n</blockquote>\n<p>先換名子</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> _TypeT                                     value_type;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> _Allocator                                 allocator_type;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> _TYPENAME allocator_type::size_type        size_type;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> _TYPENAME allocator_type::difference_type  difference_type;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> _TYPENAME allocator_type::reference        reference;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> _TYPENAME allocator_type::const_reference  const_reference;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> _TYPENAME allocator_type::pointer          pointer;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> _TYPENAME allocator_type::const_pointer    const_pointer;</span><br></pre></td></tr></table></figure>\n\n<p>還有一些很噁爛的沒過來</p>\n<p>看結構</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iterator       _C_begin;</span><br><span class=\"line\">iterator       _C_end;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> * _C_bufend;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">C_VectorAlloc</span>:</span> allocator_type &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    _C_VectorAlloc (<span class=\"keyword\">const</span> allocator_type &amp;__alloc)</span><br><span class=\"line\">        : allocator_type (__alloc), _C_begin (), _C_end (), _C_bufend ()</span><br><span class=\"line\">        &#123; <span class=\"comment\">/* empty */</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pointer _C_begin;</span><br><span class=\"line\">    pointer _C_end;</span><br><span class=\"line\">    pointer _C_bufend;</span><br><span class=\"line\">&#125; _C_alloc;</span><br></pre></td></tr></table></figure>\n<p>直接指過去</p>\n<p>建構子</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> _<span class=\"title\">InputIter</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">vector</span>  (_<span class=\"title\">InputIter</span> __<span class=\"title\">first</span>, _<span class=\"title\">InputIter</span> __<span class=\"title\">last</span>)</span></span><br><span class=\"line\"><span class=\"class\">        :</span> allocator_type (), _C_bufend ()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      size_type __n = _DISTANCE (__first, __last, size_type);</span><br><span class=\"line\">      _C_init(__n); </span><br><span class=\"line\">      _C_copy(__first, __last, _C_begin);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>假裝分配器已知，直接初始化<br>用前後家長度幹__n(vec.size())，應為那還是沒做除法XDDD</p>\n<p>insert()</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> _<span class=\"title\">InputIter</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">void</span> _<span class=\"title\">C_insert</span> (<span class=\"title\">const</span> <span class=\"title\">iterator</span> &amp;__<span class=\"title\">it</span>,</span></span><br><span class=\"line\"><span class=\"class\">                   _<span class=\"title\">InputIter</span> __<span class=\"title\">first</span>, _<span class=\"title\">InputIter</span> __<span class=\"title\">last</span>, <span class=\"title\">void</span>*) &#123;</span></span><br><span class=\"line\">        _RWSTD_ASSERT_RANGE (<span class=\"built_in\">begin</span> (), __it);</span><br><span class=\"line\">        _RWSTD_ASSERT_RANGE (__first, __last);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// dispatch to an insert suitable for the category of InputIter</span></span><br><span class=\"line\">        _RWSTD_INSERT_RANGE (__it, __first, __last,</span><br><span class=\"line\">                             _RWSTD_ITERATOR_CATEGORY (_InputIter, __first));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>push_back()</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> _C_push_back (const_reference __x) &#123;</span><br><span class=\"line\">       _RWSTD_ASSERT (_C_alloc._C_end != _C_alloc._C_bufend);</span><br><span class=\"line\">       _C_alloc.construct (_C_alloc._C_end, __x);</span><br><span class=\"line\">       ++_C_alloc._C_end;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>pop_back()</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pop_back</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       _RWSTD_ASSERT (!empty ());</span><br><span class=\"line\">       _C_alloc.destroy (_C_alloc._C_end - <span class=\"number\">1</span>);</span><br><span class=\"line\">       --_C_alloc._C_end;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">empty</span> <span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> _C_alloc._C_begin == _C_alloc._C_end;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>swap()</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swap (<span class=\"built_in\">vector</span> &amp;__other)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (get_allocator () == __other.get_allocator ()) &#123;</span><br><span class=\"line\">        pointer __tmp             = _C_alloc._C_begin;</span><br><span class=\"line\">        _C_alloc._C_begin         = __other._C_alloc._C_begin;</span><br><span class=\"line\">        __other._C_alloc._C_begin = __tmp;</span><br><span class=\"line\">        __tmp                     = _C_alloc._C_end;</span><br><span class=\"line\">        _C_alloc._C_end           = __other._C_alloc._C_end;</span><br><span class=\"line\">        __other._C_alloc._C_end   = __tmp;</span><br><span class=\"line\">        __tmp                     = _C_alloc._C_bufend;</span><br><span class=\"line\">        _C_alloc._C_bufend        = __other._C_alloc._C_bufend;</span><br><span class=\"line\">        __other._C_alloc._C_bufend = __tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// not exception-safe</span></span><br><span class=\"line\">        _C_unsafe_swap (__other);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>會寫出來就是他直接copy，一個一個</p>\n<p>asign()</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> _C_assign (_InputIter __first, _InputIter __last, <span class=\"keyword\">void</span>*) &#123;</span><br><span class=\"line\">       _RWSTD_ASSERT_RANGE (__first, __last);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// dispatch to an assign suitable for the category of InputIter</span></span><br><span class=\"line\">       _RWSTD_ASSIGN_RANGE (__first, __last,</span><br><span class=\"line\">                            _RWSTD_ITERATOR_CATEGORY (_InputIter, __first));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>resize()</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> _C_fill (iterator __first, iterator __last, <span class=\"keyword\">bool</span> __val) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (__first != __last) *__first++ = __val;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">void</span> _C_fill_n (iterator __first, size_type __n, <span class=\"keyword\">bool</span> __val) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (__n-- &gt; <span class=\"number\">0</span>) *__first++ = __val;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> _<span class=\"title\">Iterator</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">   <span class=\"title\">iterator</span> _<span class=\"title\">C_copy</span> (_<span class=\"title\">Iterator</span> __<span class=\"title\">first</span>, _<span class=\"title\">Iterator</span> __<span class=\"title\">last</span>, <span class=\"title\">iterator</span> __<span class=\"title\">res</span>) &#123;</span></span><br><span class=\"line\">       <span class=\"keyword\">while</span> (__first != __last)</span><br><span class=\"line\">           *__res++ = *__first++;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> __res;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>其實已經有<a href=\"https://hadibrais.wordpress.com/2013/11/10/dissecting-the-c-stl-vector-part-1-introduction/\" target=\"_blank\" rel=\"noopener\">大大</a>幹過，寫得比我好太多了，不過他是做m$的</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"c-vector-internal\"><a href=\"#c-vector-internal\" class=\"headerlink\" title=\"c++ vector internal\"></a>c++ vector internal</h1><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>動態請求的array<br>就是太小重要更大的，然後搬過去<br>看code</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">tem* <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> vsize)</span></span>&#123;</span><br><span class=\"line\">        tem *pay=<span class=\"keyword\">new</span> tem[vsize],*ppa,*endp=pay+vsize,*par;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(par=arr,ppa=pay;ppa&lt;=endp&amp;&amp;par&lt;=endc;++ppa,++par)&#123;</span><br><span class=\"line\">            *ppa=*par;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] arr;</span><br><span class=\"line\">        arr=pay;crr=par;endc=endp;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>他有規範要寫的函式</p>\n<p>有<a href=\"https://www.iso.org/standard/38110.html\" target=\"_blank\" rel=\"noopener\">標準</a>IEEE死要錢:shit:</p>\n<p>去看cpp reference<br><img src=\"https://i.imgur.com/EqWd9uN.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/7yqYmQP.jpg\" alt=\"\"></p>\n<p>我有寫，示範:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> addlen 5</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">tem</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">svector</span>&#123;</span></span><br><span class=\"line\">    tem* arr,*endc,*crr;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">tem* <span class=\"title\">push_back</span><span class=\"params\">(tem in)</span></span>&#123;</span><br><span class=\"line\">        (crr==endc)?resize(<span class=\"keyword\">sizeof</span>(arr)+addlen),*crr=in:*crr=in;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ++crr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">tem* <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> vsize)</span></span>&#123;</span><br><span class=\"line\">        tem *pay=<span class=\"keyword\">new</span> tem[vsize],*ppa,*endp=pay+vsize,*par;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(par=arr,ppa=pay;ppa&lt;=endp&amp;&amp;par&lt;=endc;++ppa,++par)&#123;</span><br><span class=\"line\">            *ppa=*par;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] arr;</span><br><span class=\"line\">        arr=pay;crr=par;endc=endp;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">tem* <span class=\"title\">pop_back</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> --crr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> tem <span class=\"keyword\">operator</span> [](<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> po)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[po];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> tem <span class=\"title\">at</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> po)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (po&lt;crr&amp;&amp;po&gt;=arr)?arr[po]:arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] arr;</span><br><span class=\"line\">        arr=<span class=\"keyword\">new</span> tem[addlen];</span><br><span class=\"line\">        endc=arr+addlen+<span class=\"number\">1</span>;</span><br><span class=\"line\">        crr=arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> tem <span class=\"title\">back</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *(crr<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> tem <span class=\"title\">front</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>  <span class=\"title\">comprise</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">sizeof</span>(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>  <span class=\"title\">size</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr==crr?<span class=\"number\">0</span>:(arr-crr)?<span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> i=<span class=\"number\">0</span>;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    svector()&#123;arr=<span class=\"keyword\">new</span> tem[addlen];crr=arr;endc=arr+addlen+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    ~svector()&#123;<span class=\"keyword\">delete</span> [] arr;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>帶大家去幹<a href=\"http://svn.apache.org/repos/asf/stdcxx/branches/4.2.x/include/vector\" target=\"_blank\" rel=\"noopener\">apache</a>的(gun看不懂)</p>\n</blockquote>\n<p>先換名子</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> _TypeT                                     value_type;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> _Allocator                                 allocator_type;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> _TYPENAME allocator_type::size_type        size_type;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> _TYPENAME allocator_type::difference_type  difference_type;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> _TYPENAME allocator_type::reference        reference;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> _TYPENAME allocator_type::const_reference  const_reference;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> _TYPENAME allocator_type::pointer          pointer;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> _TYPENAME allocator_type::const_pointer    const_pointer;</span><br></pre></td></tr></table></figure>\n\n<p>還有一些很噁爛的沒過來</p>\n<p>看結構</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iterator       _C_begin;</span><br><span class=\"line\">iterator       _C_end;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> * _C_bufend;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">C_VectorAlloc</span>:</span> allocator_type &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    _C_VectorAlloc (<span class=\"keyword\">const</span> allocator_type &amp;__alloc)</span><br><span class=\"line\">        : allocator_type (__alloc), _C_begin (), _C_end (), _C_bufend ()</span><br><span class=\"line\">        &#123; <span class=\"comment\">/* empty */</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pointer _C_begin;</span><br><span class=\"line\">    pointer _C_end;</span><br><span class=\"line\">    pointer _C_bufend;</span><br><span class=\"line\">&#125; _C_alloc;</span><br></pre></td></tr></table></figure>\n<p>直接指過去</p>\n<p>建構子</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> _<span class=\"title\">InputIter</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">vector</span>  (_<span class=\"title\">InputIter</span> __<span class=\"title\">first</span>, _<span class=\"title\">InputIter</span> __<span class=\"title\">last</span>)</span></span><br><span class=\"line\"><span class=\"class\">        :</span> allocator_type (), _C_bufend ()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      size_type __n = _DISTANCE (__first, __last, size_type);</span><br><span class=\"line\">      _C_init(__n); </span><br><span class=\"line\">      _C_copy(__first, __last, _C_begin);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>假裝分配器已知，直接初始化<br>用前後家長度幹__n(vec.size())，應為那還是沒做除法XDDD</p>\n<p>insert()</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> _<span class=\"title\">InputIter</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">void</span> _<span class=\"title\">C_insert</span> (<span class=\"title\">const</span> <span class=\"title\">iterator</span> &amp;__<span class=\"title\">it</span>,</span></span><br><span class=\"line\"><span class=\"class\">                   _<span class=\"title\">InputIter</span> __<span class=\"title\">first</span>, _<span class=\"title\">InputIter</span> __<span class=\"title\">last</span>, <span class=\"title\">void</span>*) &#123;</span></span><br><span class=\"line\">        _RWSTD_ASSERT_RANGE (<span class=\"built_in\">begin</span> (), __it);</span><br><span class=\"line\">        _RWSTD_ASSERT_RANGE (__first, __last);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// dispatch to an insert suitable for the category of InputIter</span></span><br><span class=\"line\">        _RWSTD_INSERT_RANGE (__it, __first, __last,</span><br><span class=\"line\">                             _RWSTD_ITERATOR_CATEGORY (_InputIter, __first));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>push_back()</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> _C_push_back (const_reference __x) &#123;</span><br><span class=\"line\">       _RWSTD_ASSERT (_C_alloc._C_end != _C_alloc._C_bufend);</span><br><span class=\"line\">       _C_alloc.construct (_C_alloc._C_end, __x);</span><br><span class=\"line\">       ++_C_alloc._C_end;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>pop_back()</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pop_back</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       _RWSTD_ASSERT (!empty ());</span><br><span class=\"line\">       _C_alloc.destroy (_C_alloc._C_end - <span class=\"number\">1</span>);</span><br><span class=\"line\">       --_C_alloc._C_end;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">empty</span> <span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> _C_alloc._C_begin == _C_alloc._C_end;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>swap()</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swap (<span class=\"built_in\">vector</span> &amp;__other)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (get_allocator () == __other.get_allocator ()) &#123;</span><br><span class=\"line\">        pointer __tmp             = _C_alloc._C_begin;</span><br><span class=\"line\">        _C_alloc._C_begin         = __other._C_alloc._C_begin;</span><br><span class=\"line\">        __other._C_alloc._C_begin = __tmp;</span><br><span class=\"line\">        __tmp                     = _C_alloc._C_end;</span><br><span class=\"line\">        _C_alloc._C_end           = __other._C_alloc._C_end;</span><br><span class=\"line\">        __other._C_alloc._C_end   = __tmp;</span><br><span class=\"line\">        __tmp                     = _C_alloc._C_bufend;</span><br><span class=\"line\">        _C_alloc._C_bufend        = __other._C_alloc._C_bufend;</span><br><span class=\"line\">        __other._C_alloc._C_bufend = __tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// not exception-safe</span></span><br><span class=\"line\">        _C_unsafe_swap (__other);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>會寫出來就是他直接copy，一個一個</p>\n<p>asign()</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> _C_assign (_InputIter __first, _InputIter __last, <span class=\"keyword\">void</span>*) &#123;</span><br><span class=\"line\">       _RWSTD_ASSERT_RANGE (__first, __last);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// dispatch to an assign suitable for the category of InputIter</span></span><br><span class=\"line\">       _RWSTD_ASSIGN_RANGE (__first, __last,</span><br><span class=\"line\">                            _RWSTD_ITERATOR_CATEGORY (_InputIter, __first));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>resize()</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> _C_fill (iterator __first, iterator __last, <span class=\"keyword\">bool</span> __val) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (__first != __last) *__first++ = __val;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">void</span> _C_fill_n (iterator __first, size_type __n, <span class=\"keyword\">bool</span> __val) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (__n-- &gt; <span class=\"number\">0</span>) *__first++ = __val;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> _<span class=\"title\">Iterator</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">   <span class=\"title\">iterator</span> _<span class=\"title\">C_copy</span> (_<span class=\"title\">Iterator</span> __<span class=\"title\">first</span>, _<span class=\"title\">Iterator</span> __<span class=\"title\">last</span>, <span class=\"title\">iterator</span> __<span class=\"title\">res</span>) &#123;</span></span><br><span class=\"line\">       <span class=\"keyword\">while</span> (__first != __last)</span><br><span class=\"line\">           *__res++ = *__first++;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> __res;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>其實已經有<a href=\"https://hadibrais.wordpress.com/2013/11/10/dissecting-the-c-stl-vector-part-1-introduction/\" target=\"_blank\" rel=\"noopener\">大大</a>幹過，寫得比我好太多了，不過他是做m$的</p>\n"},{"title":"first","date":"2020-02-07T07:14:42.000Z","_content":"# 這是我部落格的測試頁面\n","source":"_posts/first.md","raw":"---\ntitle: first\npermalink: 1581350582022\ndate: 2020-02-07 15:14:42\ntags: test\n---\n# 這是我部落格的測試頁面\n","slug":"1581350582022","published":1,"updated":"2020-02-10T17:20:49.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6mdlta7000324v7ggtt1bsh","content":"<h1 id=\"這是我部落格的測試頁面\"><a href=\"#這是我部落格的測試頁面\" class=\"headerlink\" title=\"這是我部落格的測試頁面\"></a>這是我部落格的測試頁面</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"這是我部落格的測試頁面\"><a href=\"#這是我部落格的測試頁面\" class=\"headerlink\" title=\"這是我部落格的測試頁面\"></a>這是我部落格的測試頁面</h1>"},{"title":"numtest","date":"2020-02-10T15:57:49.000Z","_content":"","source":"_posts/numtest.md","raw":"---\ntitle: numtest\npermalink: 1581350582023\ndate: 2020-02-10 23:57:49\ntags: test\n---\n","slug":"1581350582023","published":1,"updated":"2020-02-10T17:21:00.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6mdlta9000424v7bl7g5ndh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"openssh key","date":"2020-02-11T13:17:12.000Z","_content":"# 交換openssh登入金鑰\n\n- 必須先做一把RSA出來(我只用puttygen讀出來的格式試過)\n- 公鑰放到遠端主機要登入使用者的家目錄 ~/.ssh/authorized_keys\n- ~/.ssh/authorized_keys 必須是 600\n- ~/.ssh 必須是 700\n- 使用者級組別必須與登入名稱一致\n\n以上在cent os7 及 6上試過\n\n-------\n據說有指令的做法，要是有大大知道，告訴我一下\n\nref:https://askubuntu.com/questions/306798/trying-to-do-ssh-authentication-with-key-files-server-refused-our-key","source":"_posts/openssh-key.md","raw":"---\ntitle: openssh key\ndate: 2020-02-11 21:17:12\ntags: backend\npermalink: 1581427032718\n---\n# 交換openssh登入金鑰\n\n- 必須先做一把RSA出來(我只用puttygen讀出來的格式試過)\n- 公鑰放到遠端主機要登入使用者的家目錄 ~/.ssh/authorized_keys\n- ~/.ssh/authorized_keys 必須是 600\n- ~/.ssh 必須是 700\n- 使用者級組別必須與登入名稱一致\n\n以上在cent os7 及 6上試過\n\n-------\n據說有指令的做法，要是有大大知道，告訴我一下\n\nref:https://askubuntu.com/questions/306798/trying-to-do-ssh-authentication-with-key-files-server-refused-our-key","slug":"1581427032718","published":1,"updated":"2020-02-11T13:52:16.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6mdltb5000c24v73eirfzrj","content":"<h1 id=\"交換openssh登入金鑰\"><a href=\"#交換openssh登入金鑰\" class=\"headerlink\" title=\"交換openssh登入金鑰\"></a>交換openssh登入金鑰</h1><ul>\n<li>必須先做一把RSA出來(我只用puttygen讀出來的格式試過)</li>\n<li>公鑰放到遠端主機要登入使用者的家目錄 ~/.ssh/authorized_keys</li>\n<li>~/.ssh/authorized_keys 必須是 600</li>\n<li>~/.ssh 必須是 700</li>\n<li>使用者級組別必須與登入名稱一致</li>\n</ul>\n<p>以上在cent os7 及 6上試過</p>\n<hr>\n<p>據說有指令的做法，要是有大大知道，告訴我一下</p>\n<p>ref:<a href=\"https://askubuntu.com/questions/306798/trying-to-do-ssh-authentication-with-key-files-server-refused-our-key\" target=\"_blank\" rel=\"noopener\">https://askubuntu.com/questions/306798/trying-to-do-ssh-authentication-with-key-files-server-refused-our-key</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"交換openssh登入金鑰\"><a href=\"#交換openssh登入金鑰\" class=\"headerlink\" title=\"交換openssh登入金鑰\"></a>交換openssh登入金鑰</h1><ul>\n<li>必須先做一把RSA出來(我只用puttygen讀出來的格式試過)</li>\n<li>公鑰放到遠端主機要登入使用者的家目錄 ~/.ssh/authorized_keys</li>\n<li>~/.ssh/authorized_keys 必須是 600</li>\n<li>~/.ssh 必須是 700</li>\n<li>使用者級組別必須與登入名稱一致</li>\n</ul>\n<p>以上在cent os7 及 6上試過</p>\n<hr>\n<p>據說有指令的做法，要是有大大知道，告訴我一下</p>\n<p>ref:<a href=\"https://askubuntu.com/questions/306798/trying-to-do-ssh-authentication-with-key-files-server-refused-our-key\" target=\"_blank\" rel=\"noopener\">https://askubuntu.com/questions/306798/trying-to-do-ssh-authentication-with-key-files-server-refused-our-key</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck6mdlt9w000024v7d7t4cguu","tag_id":"ck6mdlta5000224v746iqe32s","_id":"ck6mdltab000624v7c2mbdaxo"},{"post_id":"ck6mdlta3000124v7cx86bm0e","tag_id":"ck6mdltab000524v74h458x7e","_id":"ck6mdltad000824v7e49j2693"},{"post_id":"ck6mdlta7000324v7ggtt1bsh","tag_id":"ck6mdltac000724v72bggfqj6","_id":"ck6mdltaf000a24v7da5p5jhj"},{"post_id":"ck6mdlta9000424v7bl7g5ndh","tag_id":"ck6mdltac000724v72bggfqj6","_id":"ck6mdltag000b24v72h7w7q6s"},{"post_id":"ck6mdltb5000c24v73eirfzrj","tag_id":"ck6mdltbb000f24v734hg9373","_id":"ck6mdltbd000g24v7e3sf5vly"}],"Tag":[{"name":"c","_id":"ck6mdlta5000224v746iqe32s"},{"name":"c++","_id":"ck6mdltab000524v74h458x7e"},{"name":"test","_id":"ck6mdltac000724v72bggfqj6"},{"name":"backend","_id":"ck6mdltbb000f24v734hg9373"}]}}