<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>openssh key</title>
      <link href="/2020/02/11/1581427032718/"/>
      <url>/2020/02/11/1581427032718/</url>
      
        <content type="html"><![CDATA[<h1 id="交換openssh登入金鑰"><a href="#交換openssh登入金鑰" class="headerlink" title="交換openssh登入金鑰"></a>交換openssh登入金鑰</h1><ul><li>必須先做一把RSA出來(我只用puttygen讀出來的格式試過)</li><li>公鑰放到遠端主機要登入使用者的家目錄 ~/.ssh/authorized_keys</li><li>~/.ssh/authorized_keys 必須是 600</li><li>~/.ssh 必須是 700</li><li>使用者級組別必須與登入名稱一致</li></ul><p>以上在cent os7 及 6上試過</p><hr><p>據說有指令的做法，要是有大大知道，告訴我一下</p><p>ref:<a href="https://askubuntu.com/questions/306798/trying-to-do-ssh-authentication-with-key-files-server-refused-our-key" target="_blank" rel="noopener">https://askubuntu.com/questions/306798/trying-to-do-ssh-authentication-with-key-files-server-refused-our-key</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numtest</title>
      <link href="/2020/02/10/1581350582023/"/>
      <url>/2020/02/10/1581350582023/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first</title>
      <link href="/2020/02/07/1581350582022/"/>
      <url>/2020/02/07/1581350582022/</url>
      
        <content type="html"><![CDATA[<h1 id="這是我部落格的測試頁面"><a href="#這是我部落格的測試頁面" class="headerlink" title="這是我部落格的測試頁面"></a>這是我部落格的測試頁面</h1>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c scope 0</title>
      <link href="/2018/04/26/1581427933327/"/>
      <url>/2018/04/26/1581427933327/</url>
      
        <content type="html"><![CDATA[<h1 id="c的變數可見域"><a href="#c的變數可見域" class="headerlink" title="c的變數可見域"></a>c的變數可見域</h1><p>半夜隔壁房再吵，睡不著寫第一篇教學幹話。其實是自己金魚腦，要筆記。</p><h3 id="區域變數"><a href="#區域變數" class="headerlink" title="區域變數"></a>區域變數</h3><p>區域變數(幹在函數第一層)，你寫在函數裡的那一種(main也算)，只有宣告下面的看的見，如果再”{}”裡，就裡面看的到。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i;;)&#123;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x main內全可見，i,y for內可見。</p><h3 id="全域變數"><a href="#全域變數" class="headerlink" title="全域變數"></a>全域變數</h3><p>全域變數，沒extern(就那個讓你在c裡寫其他語言的關鍵字)就你該張檔看的到，有的話include會汙染，<br>通常拿來讓函式回傳不只一個質。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> g;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">++g;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> g?func():<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>g全域可見<br>static，修飾字，加給全域變數時是幹話，加給函式時會在編譯時分配通常在data區，離開函式時值不話消失，<br>故不能遞迴，初始質只會處裡一次，可以直接給在函式裡。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> g=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> ++g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=func();</span><br><span class="line">x=func();</span><br><span class="line">x=func();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x為1，2，3</p><p>全域，static不給初始質是0，區域看你電腦心情。<br>同名變數部分，會先遮蔽全域，至於涵式內同名，你去死。</p><p>先暫時打在fb，等到天荒地老我把我網站做好再搬過去，程式多沒測，通常也沒什麼意義。</p><blockquote><p>現在這文應該已經在我部落格了應該拉</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++ vector internal</title>
      <link href="/2018/03/05/1581424604145/"/>
      <url>/2018/03/05/1581424604145/</url>
      
        <content type="html"><![CDATA[<h1 id="c-vector-internal"><a href="#c-vector-internal" class="headerlink" title="c++ vector internal"></a>c++ vector internal</h1><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>動態請求的array<br>就是太小重要更大的，然後搬過去<br>看code</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">tem* <span class="title">resize</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> vsize)</span></span>&#123;</span><br><span class="line">        tem *pay=<span class="keyword">new</span> tem[vsize],*ppa,*endp=pay+vsize,*par;</span><br><span class="line">        <span class="keyword">for</span>(par=arr,ppa=pay;ppa&lt;=endp&amp;&amp;par&lt;=endc;++ppa,++par)&#123;</span><br><span class="line">            *ppa=*par;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> [] arr;</span><br><span class="line">        arr=pay;crr=par;endc=endp;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>他有規範要寫的函式</p><p>有<a href="https://www.iso.org/standard/38110.html" target="_blank" rel="noopener">標準</a>IEEE死要錢:shit:</p><p>去看cpp reference<br><img src="https://i.imgur.com/EqWd9uN.jpg" alt=""><br><img src="https://i.imgur.com/7yqYmQP.jpg" alt=""></p><p>我有寫，示範:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> addlen 5</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">tem</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">svector</span>&#123;</span></span><br><span class="line">    tem* arr,*endc,*crr;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">tem* <span class="title">push_back</span><span class="params">(tem in)</span></span>&#123;</span><br><span class="line">        (crr==endc)?resize(<span class="keyword">sizeof</span>(arr)+addlen),*crr=in:*crr=in;</span><br><span class="line">        <span class="keyword">return</span> ++crr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">tem* <span class="title">resize</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> vsize)</span></span>&#123;</span><br><span class="line">        tem *pay=<span class="keyword">new</span> tem[vsize],*ppa,*endp=pay+vsize,*par;</span><br><span class="line">        <span class="keyword">for</span>(par=arr,ppa=pay;ppa&lt;=endp&amp;&amp;par&lt;=endc;++ppa,++par)&#123;</span><br><span class="line">            *ppa=*par;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> [] arr;</span><br><span class="line">        arr=pay;crr=par;endc=endp;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">tem* <span class="title">pop_back</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> --crr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> tem <span class="keyword">operator</span> [](<span class="keyword">unsigned</span> <span class="keyword">int</span> po)&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[po];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> tem <span class="title">at</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> po)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (po&lt;crr&amp;&amp;po&gt;=arr)?arr[po]:arr[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> [] arr;</span><br><span class="line">        arr=<span class="keyword">new</span> tem[addlen];</span><br><span class="line">        endc=arr+addlen+<span class="number">1</span>;</span><br><span class="line">        crr=arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> tem <span class="title">back</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> *(crr<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> tem <span class="title">front</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> *arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>  <span class="title">comprise</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">sizeof</span>(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>  <span class="title">size</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr==crr?<span class="number">0</span>:(arr-crr)?<span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span> i=<span class="number">0</span>;)</span><br><span class="line">    &#125;</span><br><span class="line">    svector()&#123;arr=<span class="keyword">new</span> tem[addlen];crr=arr;endc=arr+addlen+<span class="number">1</span>;&#125;</span><br><span class="line">    ~svector()&#123;<span class="keyword">delete</span> [] arr;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>帶大家去幹<a href="http://svn.apache.org/repos/asf/stdcxx/branches/4.2.x/include/vector" target="_blank" rel="noopener">apache</a>的(gun看不懂)</p></blockquote><p>先換名子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> _TypeT                                     value_type;</span><br><span class="line"><span class="keyword">typedef</span> _Allocator                                 allocator_type;</span><br><span class="line"><span class="keyword">typedef</span> _TYPENAME allocator_type::size_type        size_type;</span><br><span class="line"><span class="keyword">typedef</span> _TYPENAME allocator_type::difference_type  difference_type;</span><br><span class="line"><span class="keyword">typedef</span> _TYPENAME allocator_type::reference        reference;</span><br><span class="line"><span class="keyword">typedef</span> _TYPENAME allocator_type::const_reference  const_reference;</span><br><span class="line"><span class="keyword">typedef</span> _TYPENAME allocator_type::pointer          pointer;</span><br><span class="line"><span class="keyword">typedef</span> _TYPENAME allocator_type::const_pointer    const_pointer;</span><br></pre></td></tr></table></figure><p>還有一些很噁爛的沒過來</p><p>看結構</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">iterator       _C_begin;</span><br><span class="line">iterator       _C_end;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> * _C_bufend;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">C_VectorAlloc</span>:</span> allocator_type &#123;</span><br><span class="line"></span><br><span class="line">    _C_VectorAlloc (<span class="keyword">const</span> allocator_type &amp;__alloc)</span><br><span class="line">        : allocator_type (__alloc), _C_begin (), _C_end (), _C_bufend ()</span><br><span class="line">        &#123; <span class="comment">/* empty */</span>&#125;</span><br><span class="line"></span><br><span class="line">    pointer _C_begin;</span><br><span class="line">    pointer _C_end;</span><br><span class="line">    pointer _C_bufend;</span><br><span class="line">&#125; _C_alloc;</span><br></pre></td></tr></table></figure><p>直接指過去</p><p>建構子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIter</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">vector</span>  (_<span class="title">InputIter</span> __<span class="title">first</span>, _<span class="title">InputIter</span> __<span class="title">last</span>)</span></span><br><span class="line"><span class="class">        :</span> allocator_type (), _C_bufend ()</span><br><span class="line">    &#123;</span><br><span class="line">      size_type __n = _DISTANCE (__first, __last, size_type);</span><br><span class="line">      _C_init(__n); </span><br><span class="line">      _C_copy(__first, __last, _C_begin);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>假裝分配器已知，直接初始化<br>用前後家長度幹__n(vec.size())，應為那還是沒做除法XDDD</p><p>insert()</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIter</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">void</span> _<span class="title">C_insert</span> (<span class="title">const</span> <span class="title">iterator</span> &amp;__<span class="title">it</span>,</span></span><br><span class="line"><span class="class">                   _<span class="title">InputIter</span> __<span class="title">first</span>, _<span class="title">InputIter</span> __<span class="title">last</span>, <span class="title">void</span>*) &#123;</span></span><br><span class="line">        _RWSTD_ASSERT_RANGE (<span class="built_in">begin</span> (), __it);</span><br><span class="line">        _RWSTD_ASSERT_RANGE (__first, __last);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// dispatch to an insert suitable for the category of InputIter</span></span><br><span class="line">        _RWSTD_INSERT_RANGE (__it, __first, __last,</span><br><span class="line">                             _RWSTD_ITERATOR_CATEGORY (_InputIter, __first));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>push_back()</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _C_push_back (const_reference __x) &#123;</span><br><span class="line">       _RWSTD_ASSERT (_C_alloc._C_end != _C_alloc._C_bufend);</span><br><span class="line">       _C_alloc.construct (_C_alloc._C_end, __x);</span><br><span class="line">       ++_C_alloc._C_end;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>pop_back()</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_back</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">       _RWSTD_ASSERT (!empty ());</span><br><span class="line">       _C_alloc.destroy (_C_alloc._C_end - <span class="number">1</span>);</span><br><span class="line">       --_C_alloc._C_end;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> _C_alloc._C_begin == _C_alloc._C_end;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>swap()</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">swap (<span class="built_in">vector</span> &amp;__other)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (get_allocator () == __other.get_allocator ()) &#123;</span><br><span class="line">        pointer __tmp             = _C_alloc._C_begin;</span><br><span class="line">        _C_alloc._C_begin         = __other._C_alloc._C_begin;</span><br><span class="line">        __other._C_alloc._C_begin = __tmp;</span><br><span class="line">        __tmp                     = _C_alloc._C_end;</span><br><span class="line">        _C_alloc._C_end           = __other._C_alloc._C_end;</span><br><span class="line">        __other._C_alloc._C_end   = __tmp;</span><br><span class="line">        __tmp                     = _C_alloc._C_bufend;</span><br><span class="line">        _C_alloc._C_bufend        = __other._C_alloc._C_bufend;</span><br><span class="line">        __other._C_alloc._C_bufend = __tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// not exception-safe</span></span><br><span class="line">        _C_unsafe_swap (__other);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>會寫出來就是他直接copy，一個一個</p><p>asign()</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _C_assign (_InputIter __first, _InputIter __last, <span class="keyword">void</span>*) &#123;</span><br><span class="line">       _RWSTD_ASSERT_RANGE (__first, __last);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// dispatch to an assign suitable for the category of InputIter</span></span><br><span class="line">       _RWSTD_ASSIGN_RANGE (__first, __last,</span><br><span class="line">                            _RWSTD_ITERATOR_CATEGORY (_InputIter, __first));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>resize()</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _C_fill (iterator __first, iterator __last, <span class="keyword">bool</span> __val) &#123;</span><br><span class="line">       <span class="keyword">while</span> (__first != __last) *__first++ = __val;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">void</span> _C_fill_n (iterator __first, size_type __n, <span class="keyword">bool</span> __val) &#123;</span><br><span class="line">       <span class="keyword">while</span> (__n-- &gt; <span class="number">0</span>) *__first++ = __val;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Iterator</span>&gt;</span></span><br><span class="line"><span class="class">   <span class="title">iterator</span> _<span class="title">C_copy</span> (_<span class="title">Iterator</span> __<span class="title">first</span>, _<span class="title">Iterator</span> __<span class="title">last</span>, <span class="title">iterator</span> __<span class="title">res</span>) &#123;</span></span><br><span class="line">       <span class="keyword">while</span> (__first != __last)</span><br><span class="line">           *__res++ = *__first++;</span><br><span class="line">       <span class="keyword">return</span> __res;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其實已經有<a href="https://hadibrais.wordpress.com/2013/11/10/dissecting-the-c-stl-vector-part-1-introduction/" target="_blank" rel="noopener">大大</a>幹過，寫得比我好太多了，不過他是做m$的</p>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about.html"/>
      <url>/about.html</url>
      
        <content type="html"><![CDATA[<p>陳哲佑 台灣台南人 邊疆大學資工系廢材乙個<br>這邊應該全是工作筆記、土炮紀錄、耍腦發廚<br>愼入</p><p>gitlab : <a href="https://gitlab.com/joe1231231218" target="_blank" rel="noopener">https://gitlab.com/joe1231231218</a><br>email : <a href="mailto:connection@ericchen.name">connection@ericchen.name</a></p>]]></content>
      
    </entry>
    
    
  
</search>
